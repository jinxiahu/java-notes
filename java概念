# java-notes
java中需要注意的概念
访问控制符：
    private：只在同一个类中可见、
    protect：在同一个类中、同一个包中、不同包中的子类中可见
    public：均可见
    默认：没有访问控制符时，在同一个类中同一个包中可见。
 非访问控制符：
     static：静态的、非实例的、类的（可以修饰内部类和成员变量）
     final：最终的、不接改变的（可以修饰内部类和成员变量以及局部变量）
     abstract：抽象的、不可实例化的（可以修饰内部类和成员变量）
  static字段：
            静态字段最本质的特点是：它们是类的字段，不属于任何一个对象实例。
        • 它不保存在某个对象实例的内存区间中，而是保存在类的内存区域的公共存储单元。
        • 类变量可以通过类名直接访问，也可以通过实例对象来访问，两种方法的结果是相同的。
        • 如System类的in和out对象，就是属于类的域，直接用类名来访问，即System.in和System.out。
   static字段：
          用static修饰符修饰的方法仅属于类的静态方法，又称为类方法。
        • 与此相对，不用static修饰的方法，则为实例方法。
        • 类方法的本质是该方法是属于整个类的，不是属于某个实例的。
        • 声明一个方法为static有以下几重含义。
            (1) 非static的方法是属于某个对象的方法，在这个对象创建时，对象的方法在内存中拥有自己专用的代码段。而static的方法是属于整个类的，它在内存中的代码段将随着类的定义而进行分配和装载，不被任何一个对象专有。
            (2) 由于static方法是属于整个类的，所以它不能操纵和处理属于某个对象的成员变量，而只能处理属于整个类的成员变量，即static方法只能处理本类中的static域或调用static方法。
            (3) static方法中，不能访问实例变量， 不能使用this 或super。
            (4) 调用这个方法时，应该使用类名直接调用，也可以用某一个具体的对象名。
               例如： Math.random()， Integer.parseInt()等就是类方法，直接用类名进行访问。
    final类：
        如果一个类被final修饰符所修饰和限定，说明这个类不能被继承，即不可能有子类。
    final方法：
        final修饰符所修饰的方法，是不能被子类所覆盖的方法。
        
    final字段及final局部变量：   
           它们的值一旦给定，就不能更改。是只读量，它们能且只能被赋值一次，而不能被赋值多次。
           一个字段被static final两个修饰符所限定时， 它可以表示常量，如Integer. MAX_VALUE(表示最大整数)、 Math.PI(表示圆周率)就是这种常量。
           关于赋值在定义static final域时，若不给定初始值，则按默认值进行初始化（数值为0， boolean型为false，引用型为null）。
           在定义final字段时，若不是static的域，则必须且只能赋值一次，不能缺省。
           这种域的赋值的方式有两种： 一是在定义变量时赋初始值，二是在每一个构造函数中进行赋值。
           在定义final局部变量时，也必须且只能赋值一次。它的值可能不是常量，但它的取值在变量存在期间不会改变。
     1． abstract类
          凡是用abstract修饰符修饰的类被称为抽象类。
          抽象类不能被实例化
     2． abstract方法
          被abstract所修饰的方法叫抽象方法，抽象方法的作用在为所有子类定义一个统一的接口。对抽象方法只需声明，而不需实现， 即用分号（；）而不是用{}，格式如下：
          abstract returnType abstractMethod( [paramlist] );抽象类中可以包含抽象方法，也可以不包含abstract方法。但是，一旦某个类中包含了abstract方法，则这个类必须声明为abstract类。
          抽象方法在子类中必须被实现，否则子类仍然是abstract的。
    接口（interface）
         接口，某种特征的约定：（使用方法和参数来说明约定的特征）
         定义接口 （interface）
                所有方法都是自动是public abstract
         实现接口  (implements)
                可以实现多继承
                与类的继承关系无关
          面向接口编程，而不是面向实现
          1. 通过接口可以实现不相关类的相同行为，而不需要考虑这些类之间的层次关系。从而在一定意义上实现了多重继承。
          2. 通过接口可以指明多个类需要实现的方法。
          3. 通过接口可以了解对象的交互界面，而不需了解对象所对应的类。
  
  字段变量和局部变量：
       前者是在类中的变量，后者是在方法中定义的变量或者方法的参变量
       
      基本类型(primitive type)：其值直接存于变量中。“在这里”
      引用型(reference type) 的变量除占据一定的内存空间外，它所引用的对象实体（由new 创建）也要占据一定空间。“在那里”

